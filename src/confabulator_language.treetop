module Confabulator
	grammar ConfabulatorLanguage
		 rule sentence
		 	(substitution / choice / escaped_char / words)+ {
				def compose(kb = nil)
					elements.map {|e| e.compose(kb) }.join
				end
			}
		 end
	
		rule choice
	   	'{' first_sentence:(weight:weight? sentence) rest_sentences:('|' weight:weight? sentence)* '}' {
				def compose(kb = nil)
					elems = []
					(first_sentence.weight.empty? ? 1 : first_sentence.weight.value).times { elems << first_sentence.sentence }
					rest_sentences.elements.each do |s|
						(s.weight.empty? ? 1 : s.weight.value).times { elems << s.sentence }
					end
					elems[elems.length * rand].compose(kb)
				end
			}
		end
		
		rule weight
			w:([0-9]+) ':' {
				def value
					w.text_value.to_i
				end
			}
		end
		
		rule substitution
			!'\\\\' '[' w name:( [a-zA-Z] [a-zA-Z_0-9-]* ) w options:(":" [a-zA-Z]+)? w ']' {
				def compose(kb = nil)
					if kb
						result = kb.find(name.text_value).confabulate
						if options.text_value =~ /p/
							result = result.en.plural
						elsif options.text_value =~ /c/
							result[0] = result[0].upcase if result[0]
						end
						result
					else
						""
					end
				end
			}
		end
	
		rule w
			[ \t]* {
				def compose(kb = nil)
					text_value
				end
			}
		end
	
		rule escaped_char
			'\\' . {
				def compose(kb = nil)
					text_value
				end
			}
		end
	
		rule words
			[^\[{}\|\\]+ {
				def compose(kb = nil)
					text_value
				end
			}
		end
	
		rule char
			!'\\\\' . {
				def compose(kb = nil)
					text_value
				end
			}
		end
	end
end